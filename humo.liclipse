scope_to_color_name: {
 #All types of strings map to the string color
 doubleQuotedMultiLineString: string,
 singleQuotedMultiLineString: string,
 doubleQuotedString: string,
 singleQuotedString: string,
 typeScope: constant,
 eval: constant,
}

scope_definition_rules:
  #Comments
  #singleLineComment is also the name of the color (no translation required in scope_to_color_name)
  - {type: MultiLineRule, scope: multiLineComment, start: '[ex', end: 'ec]', escapeCharacter: '\0'}
  - {type: EndOfLineRule, scope: singleLineComment, start: '//'}

scope:
  singleLineComment:
    javadocTag: [exec]

  default:
    sub_rules: [
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: keyword, sequence: 'type'}, #Define that 'type' is a keyword
        { type: OneOrMoreSpacesRule, scope: default},
        #And any name after 'class' is the class we matched (we'll put it in the outline defining [default, class]).
        { type: AnyWordRule, scope: class, additionalChars: '.' }
        ]
      },
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: keyword, sequence: 'function'}, #Define that 'function' is a keyword
        { type: OneOrMoreSpacesRule, scope: default},
        #And any name after 'class' is the class we matched (we'll put it in the outline defining [default, class]).
        { type: AnyWordRule, scope: method, additionalChars: '.' }
        ]
      },
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: typeScope, sequence: '::'}, #Define ::Type
        #And any name after 'class' is the class we matched (we'll put it in the outline defining [default, class]).
        { type: AnyWordRule, scope: typeScope, additionalChars: '.{},0123456798' }
        ]
      },
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: eval, sequence: '@'},
        { type: AnyWordRule, scope: eval }
        ]
      },
      {type: NumberRule, scope: number}
    ]

    keyword: [
              '#class',
              '#method',
              '#field',
              '#reassign-field',
              '#this',
              '#instance-name',
              '#constructor-parameter',
              '#method-parameter',
              '#var',
              '#previous-value-of',
              '#use-constructor-parameter',
              '#use-method-parameter',
              '#new',
              '#call',
              '#last-result',
              '#return',
              '#ref',
              '#run-main-class',
              '_+_',
              '_-_',
              '_==_'
              ]

    bracket: ['{', '}']

    operator: ['_x_', '_+_', '_-_', '_==_', '!', '&', '|', '%', '~', ^, ',', ';']


file_extensions: [humo]
filename: []
name: humo

outline: #Icons: LiClipseParsedItem.getImage(): class, method, comment, attribute (based on 'define')
  - {type: Scope, scope: [default, class], define: class} #scope is a list to identify sub-rule
  - {type: Scope, scope: [default, method], define: method}
  - {type: Regexp, scope: [singleLineComment], regexp: '#---.*', define: comment, group: 0}

indent: {
  type: spaces, #Spaces are used for indenting in Python
  outline_scopes: [class, method], #Scopes are created where the outline defines a class or method.
  spaces_for_tabs: true, #Python folks recommend it.
  tab_width: 4, #Note: optional (default is based on preferences for text editors in the eclipse preferences)
}

auto_edit:
  - {auto_close_scopes: [doubleQuotedString, doubleQuotedMultiLineString], scope: default} #To work, the scopes must be: SingleLineRule(sequence used for start/end) or MultiLineRule.
  - {auto_close_parens: ['(', '[', '{'], scope: default} #Will close the parens if it's not properly balanced
  - {auto_skip_parens: [')', ']', '}'], scope: default} #Will skip the close parens if it's properly balanced

# Specify that the default comment action (Ctrl+/) deals with creating '#' at the start of the line
comment: {type: singleLine, sequence: '//'}

# Number types: Int8, Uint8, Int16, Uint16, Int32, Uint32, Int64, Uint64, Int128, Uint128, Bool, Char, Float16, Float32, Float64

# Special: Inf16, Inf32, Inf, -Inf16, -Inf32, -Inf, NaN16, NaN32, NaN

# Others: BigInt, typemax, typemin

# funcs: zero(type), one(type), typeof(x), eps(type), println(), sizeof()

# Make more templates based on: http://docs.julialang.org/en/release-0.2/stdlib/base/

templates: #Note: pressing ctrl+space twice will show only the templates
- name: 'class'
  description: "create class"
  pattern: |-
    #class ${name}
    {
      #method ${methodname}
      {
        [exec]{#constructor-parameter p1{#this.${field1}}}
        [exec]{#instance-name {solver}}
        [exec]{#new TableBasedValueSolver}
        [exec]{#return {#last-result}}
      }

      #field ${field1} {#use-constructor-parameter ${field1}}
    }

- name: 'new'
  description: "new instance"
  pattern: |-
        [exec]{#constructor-parameter p1{1}}
        [exec]{#constructor-parameter p2{2}}
        [exec]{#instance-name {${instancename}}}
        [exec]{#new ${classname}}
        [exec]{#call ${instancename}.${method}}
        [exec]{#var result1 {#last-result}}


- name: ''
  description: "Surround with try..finally"
  pattern: |-
    try
    ${indented_block}
    finally
        ${cursor}
    end

- name: 'function'
  description: "function"
  pattern: |-
    function(${params})
        ${cursor}
    end

- name: 'type'
  description: "type"
  pattern: |-
    type ${Type}
        ${cursor}
    end
